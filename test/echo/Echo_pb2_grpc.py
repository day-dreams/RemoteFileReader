# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Echo_pb2 as Echo__pb2


class EchoServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.echo = channel.unary_unary(
            '/EchoService/echo',
            request_serializer=Echo__pb2.EchoRequest.SerializeToString,
            response_deserializer=Echo__pb2.EchoReply.FromString,
        )


class EchoServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def echo(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'echo': grpc.unary_unary_rpc_method_handler(
            servicer.echo,
            request_deserializer=Echo__pb2.EchoRequest.FromString,
            response_serializer=Echo__pb2.EchoReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'EchoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
